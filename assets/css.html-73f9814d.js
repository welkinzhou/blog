import{_ as t,r as e,o as p,c,a as n,f as s,d as o,h as l}from"./app-fdc7c009.js";const i={},u=n("h2",{id:"css",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css","aria-hidden":"true"},"#"),s(" CSS")],-1),d=n("p",null,"CSS 时常会出现各种各样的新问题，总有一些让你百思不得其解。与我而言，CSS 真是一个充满了惊奇的语言，如此让人着迷。",-1),r=n("h3",{id:"层叠上下文和层叠水平",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#层叠上下文和层叠水平","aria-hidden":"true"},"#"),s(" 层叠上下文和层叠水平")],-1),k=n("strong",null,"层叠上下文",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"},g=l(`<p>MDN 给出了很多属性，常用的就是定位元素，还有 flex 容器的子元素。</p><p>几个基本的原则，帮助你排除 z-index 的问题。</p><ol><li>层叠上下文中子元素不会影响到外部元素的层叠水平，也就是说考虑层叠顺序时，只需要考虑兄弟元素间的层叠。如果父级层叠水平比较低，那么子级 z-index 再高都没用。</li><li>兄弟元素间，层叠上下文层叠水平比普通元素高，通过设置 z-index，可以改变层叠上下文的层叠水平。简单说，不设置 z-index，或者 z-index &gt;=0，层叠上下文元素的层叠水平都比普通元素高，设置 z-index 为负数，层叠上下文层叠水平会低于普通元素。</li><li>兄弟层叠上下文间，z-index 越大，层叠水平越高。</li><li>相同的层叠水平下，后面的元素层叠水平比前面的高。</li></ol><p>举个例子，如下的 dom 结构：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>area fir<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>area sec<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单设置样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.area</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.fir</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> antiquewhite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.sec</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在两个 div 都不具有层叠上下文属性，.sec 元素是覆盖在 .fir 之上的。如果给 .fir 设置 <code>position: relative;</code>，.fir 就会覆盖在 .sec 之上。如果给 .fir 设置 <code>z-index: -1;</code>，.fir 会重新回到底部。</p><p>还有一个比较有意思的东西，行内元素的层级实际上比块级元素高。</p><h3 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h3><p>各种定位中，<code>fixed</code> 有一点特性容易被忽略掉：</p><p><em>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。<code>fixed</code> 属性会创建新的层叠上下文。当元素祖先的 <code>transform</code>、<code>perspective</code>、<code>filter</code> 或 <code>backdrop-filter</code> 属性非 <code>none</code> 时，容器由视口改为该祖先。</em></p><p>当我们希望使用 <code>position: fixed;</code> 来使元素针对视口进行定位时，切记父级元素中不要包含 transform 等属性，这个我会踩过坑的 T_T。</p><h3 id="高度" tabindex="-1"><a class="header-anchor" href="#高度" aria-hidden="true">#</a> 高度</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.container</span> <span class="token punctuation">{</span>
    <span class="token property">min-height</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.inner</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inner<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如上述 dom 结构，如果父级只设置了 <code>min-height</code>，子元素的 <code>height: 100%;</code>是没有用的。min-height 只会限制元素高度，并不代表元素的高度（我知道听起来很奇怪）。就是说，min-height 不设置元素 height，子元素使用 percentage 设置 height，需要父级的 height。min-height 不设置 height，所以子元素的 height: 100% 是没有作用的。</p><h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><p>css 中的选择器永远是针对 document 中所有元素的，这句话可能让人有些摸不着头脑，要结合一点 js 中的 <code>querySelector</code>来理解。</p><p>比如说，我们创建了一个组件，需要操作其中某个元素，可能会想到使用 <code>document.querySelector</code> 来获取对应元素。这样获取的元素是在整个 document 中进行查找，有可能查找到组件外部的元素。这是就会想到 <code>Element.querySelector</code>，来查找当特定 Element 下的对应元素。</p><p>例如下面的 html 结构中：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contentRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若想要获取 diiv.cat，可以是用 <code>contentRef.value.querySelectorAll(&#39;.cat&#39;)</code>，这样即使组件外面同样有 div.cat，也不会被匹配到。<code>Element.querySelector</code> 只会匹配 Element 内部（不包括自身）的元素。</p><p>假设只想匹配 div.wow &gt; div.cat，也就是第一个 cat。可能会想，既然只查找元素内部，第二个 cat 是在 footer 下面 c，而第一个 cat 是在 div 下面。那么只需要查找 <code>contentRef.value.querySelectorAll(&#39;div div&#39;)</code>。</p><p>测试一下就会发现很神奇的一点，返回的 nodeList 场地是 3。匹配到的元素分别是 div.wow 和 两个 div.cat。为啥呢，为什么不是第一个 div.cat？</p><p>这是因为 css selector 匹配时候，是遍历的整个 document 结构进行查找。Element.querySelector 的作用是限定返回值的范围，也就是针对所有匹配到的元素进行过滤，只返回 Element 内部的元素。</p><p>例如 div.wow 是在 contentRef 下面的，满足 &#39;div div&#39;这个结构，同时也在 contentRef 内部，这样就会被返回。</p><p>理解了这一点，就可以进入 <code>:not() 伪类</code> 的迷惑性匹配了。</p><p>假设你想整个骚操作， <code>contentRef.value.querySelectorAll(&#39;.wow .cat&#39;)</code> 这样匹配太普通了，不让它有趣点。这样一个新点子诞生了， <code>contentRef.value.querySelectorAll(&#39;:not(.en) .cat&#39;)</code> 。当前结构下，不在 div.en 下的 div.cat，就是需要查找的元素了。</p><p>会成功吗？当然不行，两个元素都被匹配上了。</p><p>原因还是 css selector 工作时候是查找的整个 document。如果从整个文档看，总有一个外层元素会让第二个 div.cat 满足，不在 .en 下面，比如 html .cat。html 元素上就没有 en 类。</p><p>如果能给定更严格的结构，<code>:not()</code>也能正常工作，例如 <code>contentRef.value.querySelectorAll(&#39;:not(.en) &gt; .cat&#39;)</code>。</p><p>还是不建议这样使用 <code>:not()</code>，需要过滤时候最好使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> list <span class="token operator">=</span> contentRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token string">&quot;.en&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function m(h,b){const a=e("ExternalLinkIcon");return p(),c("div",null,[u,d,r,n("p",null,[s("css 中经常使用 z-index 去修改元素层叠水平（通俗讲，就是哪个元素覆盖在上面），但是 z-index 生效是有限定条件的。有些情况下，会出现怎么增加 z-index 都无法改变样式层叠关系。这个时候，就需要了解 "),k,s("，搞清 css 层叠的原理，参考 "),n("a",v,[s("MDN"),o(a)]),s("。")]),g])}const q=t(i,[["render",m],["__file","css.html.vue"]]);export{q as default};
