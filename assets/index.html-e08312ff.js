import{_ as e,r as o,o as c,c as i,a as s,f as n,d as t,h as p}from"./app-fdc7c009.js";const l={},u=s("h1",{id:"vite-插件初探",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vite-插件初探","aria-hidden":"true"},"#"),n(" vite 插件初探")],-1),r=s("p",null,"现在大家写博客，都习惯了写 Markdown 文件。一个将 md 文件转换成 html，或者 vue 组件的插件就必不可少。",-1),d={href:"https://github.com/antfu/vite-plugin-md",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> Markdown <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-md&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">Markdown</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">markdownItOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">linkify</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">typographer</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">markdownItSetup</span><span class="token punctuation">(</span><span class="token parameter">md</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// add anchor links to your H[x] tags</span>
        md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;markdown-it-anchor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// add code syntax highlighting with Prism</span>
        md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;markdown-it-prism&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v={href:"https://github.com/yankeeinlondon/code-builder",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Markdown <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-md&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> code <span class="token keyword">from</span> <span class="token string">&quot;@yankeeinlondon/code-builder&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">Markdown</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">builders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我很好奇为什么，是不是使用方式有问题。</p><p>就把 <code>vite-plugin-md</code> 和 <code>@yankeeinlondon/code-builder</code> 的源码拉下来，简单看了一下。在这个过程中，突然冒出一个念头，我还 没写过 vite 的插件呢！！！不如趁此机会，自己写一个练习一下。也是因为这个原因，我对官方插件中的问题，不求甚解，下述的定位 过程，很多都是我的猜测，没有认真测。如果大家有遇到类似问题，可以参考一下。</p><h2 id="vite-插件基础" tabindex="-1"><a class="header-anchor" href="#vite-插件基础" aria-hidden="true">#</a> vite 插件基础</h2>`,4),b={href:"https://cn.vitejs.dev/guide/api-plugin.html",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>插件返回一个对象，基本属性有 <code>name</code>，name 会在插件报错时，随错误信息一起给出。</p><p>还有一个很重要的属性，<code>enforce</code>。指定插件的加载顺序：</p><ul><li>Alias</li><li>带有 <code>enforce: &#39;pre&#39;</code> 的用户插件</li><li>Vite 核心插件</li><li>没有 enforce 值的用户插件</li><li>Vite 构建用的插件</li><li>带有 <code>enforce: &#39;post&#39;</code> 的用户插件</li><li>Vite 后置构建插件（最小化，manifest，报告）</li></ul><p>接下来就是一些有用的 hooks，具体的还是要看官方文档。下面我只会写遇到过的，别的我也不熟悉，就不班门弄斧了。</p><h3 id="vite-plugin-md" tabindex="-1"><a class="header-anchor" href="#vite-plugin-md" aria-hidden="true">#</a> vite-plugin-md</h3><p>在看 <code>vite-plugin-md</code> 的实现之前，有几个问题需要思考</p><ol><li>怎么识别 md 文件。</li><li>怎么 md 文件变成 vue 组件，这里实际上有两步，首先要将 md 转为 html（markdown-it），再把得到的 html 变成 vue 组件。</li></ol><p>尤其是第二点，当时让我迷惑了很久。工程化一般使用的是 SFC，很多时候都忘了，实际上组件的使用需要注册，才能使用。包括引入的 组件，很多时候也是使用插件的形式，暴露一个 install，通过 <code>app.component</code> 的方式全局注册组件使用。但是 <code>Vite</code> 是一个打包 工具，和 vue 本身并没有任何关系，也就无从获取 vue 实例，这样怎么注册组件呢？</p><p>带着问题，开始看代码。</p><h4 id="插件主体" tabindex="-1"><a class="header-anchor" href="#插件主体" aria-hidden="true">#</a> 插件主体</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>enforce<span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">,</span>
<span class="token function">configResolved</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>c <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransformResult<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** converts Markdown to VueJS SFC string */</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">markdownToVue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">async</span> <span class="token function">handleHotUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>

  <span class="token keyword">const</span> defaultRead <span class="token operator">=</span> ctx<span class="token punctuation">.</span>read
  ctx<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">markdownToVue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">defaultRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>enforce</code> 设置的是 pre， 也就是在 Vite 核心插件调用前执行，这个很重要，后面就会明白。</p><p>这里使用了三个 hook，<code>configResolved</code> 会在 vite 配置解析完成后调用，这里是用来保存插件配置的。vite-plugin-md 有自己的一 些配置项，这里保存下来可以在别的方法中获取配置项。</p><p><code>transform</code> 是 rollup 中的 hook，官方描述是 <code>Can be used to transform individual modules</code>，在这个 hook 中可以对引入的模 块进行转换。transform 的函数类型是： <code>(code: string, id: string) =&gt; TransformResult</code>。参数中的 code 就是读取到的文件内容 ，id 是文件绝对路径。值得注意的是 hook 返回值，类型如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TransformResult</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> Partial<span class="token operator">&lt;</span>SourceDescription<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">SourceDescription</span> <span class="token punctuation">{</span>
  code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  map<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SourceMap<span class="token punctuation">;</span>
  ast<span class="token operator">?</span><span class="token operator">:</span> ESTree<span class="token punctuation">.</span>Program<span class="token punctuation">;</span>
  assertions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  meta<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>plugin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  moduleSideEffects<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token string">&quot;no-treeshake&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  syntheticNamedExports<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rollup 中对返回值的描述：<code>this hook can optionally return a </code>{ code, ast, map }<code>object. The</code>ast<code>must be a standard ESTree AST with</code>start<code>and</code>end<code>properties for each node. If the transformation does not move code, you can preserve existing sourcemaps by setting</code>map<code>to</code>null<code>. Otherwise, you might need to generate the source map.</code>我 们可以直接返回处理后的文件内容，如果有改动，官方建议手动生成一个 source map。</p><p>还有一个钩子 <code>handleHotUpdate</code>，这个 hook 是 Vite 提供的，用来处理 HMR，每次更新后重新编译。接受一个参数 ctx，ctx 类型签 名如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">HmrContext</span> <span class="token punctuation">{</span>
  file<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  timestamp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  modules<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  server<span class="token operator">:</span> ViteDevServer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>file 是修改的文件路径。</p><ul><li><code>modules</code> 是受更改文件影响的模块数组。它是一个数组，因为单个文件可能映射到多个服务模块（例如 Vue 单文件组件）。</li><li><code>read</code> 这是一个异步读函数，它返回文件的内容。之所以这样做，是因为在某些系统上，文件更改的回调函数可能会在编辑器完成文 件更新之前过快地触发，并 <code>fs.readFile</code> 直接会返回空内容。传入的 <code>read</code> 函数规范了这种行为。</li></ul><p>在这个 hook 中，我们不能直接拿到读取过的文件，需要通过调用 read 获取。其实也合理，有些文件的更新并不需要额外处理，等到需 要处理时候再读取。</p><p>OK，API 介绍完成，整个方法的逻辑也就很清楚了。configResolved 中保存配置信息。在 transform 和 handleHotUpdate 中，通过 filter 方法，判断当前文件是否是 md 文件（判断文件路径是否是 .md 结尾）。使用 markdownToVue 将 md 文件转换为 Vue SFC 字符 串。</p><p>如果敏感一点，我应该已经注意到了这里是将 md 转化为 <strong>SFC 字符串！！！</strong>。可惜当时并不懂这是什么意思。</p><h4 id="markdowntovue" tabindex="-1"><a class="header-anchor" href="#markdowntovue" aria-hidden="true">#</a> markdownToVue</h4><p>markdownToVue 的流程很复杂，只会挑其中我感兴趣的看。markdownToVue 最终使用的是 <code>composeSfcBlocks</code> 方法。在 composeSfcBlocks 使用的是函数式编程，使用了很多的 flow，pipe 方式（类似于 Haskell 中的 compose，无非是 Haskell 中是从右 到左，这里是从上到下）。整个方法的组织模式是 pointFree 的，也就意味着我们不需要关注中间过程，只需要看几个关键函数就行了 。函数命名语义化也很好，整体阅读体验还是很好的。</p><p><strong>createParser</strong></p><p>这个方法引入 markdown-it，整体代码简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> createParser <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token generic-function"><span class="token function">transformer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;metaExtracted&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkdownIt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      html<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      linkify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      typographer<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token operator">...</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>options<span class="token operator">?.</span>markdownItOptions
        <span class="token operator">?</span> payload<span class="token punctuation">.</span>options<span class="token punctuation">.</span>markdownItOptions
        <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    parser<span class="token punctuation">.</span>linkify<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fuzzyLink<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>payload<span class="token punctuation">,</span> parser<span class="token punctuation">,</span> stage<span class="token operator">:</span> <span class="token string">&quot;parser&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>loadMarkdownItPlugins</strong></p><p>这一步看代码，是用来加载 markdown-it 插件的。但是和官方给的用法是不一样的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> loadMarkdownItPlugins <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token generic-function"><span class="token function">transformer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;parser&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    payload<span class="token punctuation">.</span>options<span class="token punctuation">.</span>markdownItUses<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>plugin<span class="token punctuation">,</span> options<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      payload<span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这是使用的 config 中的 <code>markdownItUses</code> 选项，依次调用加载。这和上面的 <code>markdownItSetup</code> 是不一样的，我怀疑可能 这里导致我之前直接使用 <code>markdown-it-prism</code> 高亮代码没有生效。</p><p><strong>parseHtml</strong></p><p>这里就是调用了，markdown-it 的 render 方法，将 md 转化成 html，没什么好说的。</p><p>接下来就是一写格式化的东西，比如说如果有给定的 class，或者 vue componnet，将 md 转化后的 html，使用 div 或者 component 包裹起来。这些根据需要来看就行了。</p><p><strong>extractBlocks</strong></p><p>这个函数用来抽离不同的功能去，可以看看，针对各种情况的处理，非常详细。但是对于我来说不是很重要。</p><p><strong>finalize</strong></p><p>看到这个方法，我之前说的第二个疑惑瞬间清楚了：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> finalize <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token generic-function"><span class="token function">transformer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;sfcBlocksExtracted&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>payload<span class="token punctuation">.</span>scriptSetup<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>payload<span class="token punctuation">.</span>scriptBlocks<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>
      <span class="token string">&quot;\\n&quot;</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>payload<span class="token punctuation">.</span>styleBlocks<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>payload<span class="token punctuation">.</span>customBlocks<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">wrap</span><span class="token punctuation">(</span>
      <span class="token string">&quot;template&quot;</span><span class="token punctuation">,</span>
      payload<span class="token punctuation">.</span>templateBlock
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>payload<span class="token punctuation">,</span>
      stage<span class="token operator">:</span> <span class="token string">&quot;closeout&quot;</span><span class="token punctuation">,</span>
      component<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),f=s("code",null,"enforce",-1),y={href:"https://github.com/vuejs/core/tree/main/packages/compiler-sfc",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>接下来是创建 source map，嘿嘿，我跳过了。包括 extractBlocks，留着接下来补课吧。</p><h3 id="code-builder" tabindex="-1"><a class="header-anchor" href="#code-builder" aria-hidden="true">#</a> code builder</h3><p>上面只看到 markdown-it 的插件使用失效的可能原因，后来我是用 code builder 确实高亮了，但是一键 copy 代码配置后报错。所以 我又看了这个插件的代码，看的比较粗糙。</p><p><strong>defaultBlocks</strong></p><p>这个方法是用来创建代码块基本结构的，这里我只关心粘贴的功能：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * The heading row will always be defined but what it contains is determined by
 * configuration
 */</span>
<span class="token keyword">const</span> heading <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
  <span class="token string">&#39;&lt;div class=&quot;heading-row&quot;&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token function">addClass</span><span class="token punctuation">(</span>metaClasses<span class="token punctuation">)</span><span class="token punctuation">,</span>
  fence<span class="token punctuation">.</span>props<span class="token punctuation">.</span>heading
    <span class="token operator">?</span> <span class="token function">append</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">resolver</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>o<span class="token operator">?.</span>headingClasses<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          fence<span class="token punctuation">.</span>props<span class="token punctuation">.</span>heading
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token operator">:</span> identity<span class="token punctuation">,</span>
  o<span class="token operator">?.</span>clipboard
    <span class="token operator">?</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;i-clipboard class=&quot;icon clipboard&quot; @click=&quot;_copyClipboard&quot; /&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> identity<span class="token punctuation">,</span>
  o<span class="token operator">?.</span>showLanguage <span class="token operator">?</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;span class=&quot;lang-display&quot;&gt;&lt;/span&gt;&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> identity
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> codeBlockWrapper <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;code-wrapper&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
  heading <span class="token operator">||</span> <span class="token string">&quot;&quot;</span>
<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;div class=&quot;code-block&quot;&gt;&lt;/div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>footer <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里给了两个功能区，一个是显示代码的 Language，还有就是 <code>clipboard</code> 一键粘贴代码功能。这里给出的点击事件是 <code>_copyClipboard</code>。很神奇的是，找不到这个方法的实现。</p><p>继续往下看，btw，这个插件代码风格和 vi t-plugin-md 一样，也是 pointFree 的，看到了一个方法 <code>addClipboard</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">CLIPBOARD</span> <span class="token operator">=</span>
  <span class="token string">&#39;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; class=&quot;clipboard&quot; viewBox=&quot;0 0 256 256&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M166 152a6 6 0 0 1-6 6H96a6 6 0 0 1 0-12h64a6 6 0 0 1 6 6Zm-6-38H96a6 6 0 0 0 0 12h64a6 6 0 0 0 0-12Zm54-66v168a14 14 0 0 1-14 14H56a14 14 0 0 1-14-14V48a14 14 0 0 1 14-14h37.2a45.8 45.8 0 0 1 69.6 0H200a14 14 0 0 1 14 14ZM94 64v2h68v-2a34 34 0 0 0-68 0Zm108-16a2 2 0 0 0-2-2h-29.7a44.9 44.9 0 0 1 3.7 18v8a6 6 0 0 1-6 6H88a6 6 0 0 1-6-6v-8a44.9 44.9 0 0 1 3.7-18H56a2 2 0 0 0-2 2v168a2 2 0 0 0 2 2h144a2 2 0 0 0 2-2Z&quot;/&gt;&lt;/svg&gt;&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addClipboard</span> <span class="token operator">=</span>
  <span class="token punctuation">(</span>p<span class="token operator">:</span> Pipeline<span class="token operator">&lt;</span>PipelineStage<span class="token punctuation">.</span>parser<span class="token operator">&gt;</span><span class="token punctuation">,</span> o<span class="token operator">:</span> CodeOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token punctuation">(</span>fence<span class="token operator">:</span> CodeBlockMeta<span class="token operator">&lt;</span><span class="token string">&quot;dom&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> CodeBlockMeta<span class="token operator">&lt;</span><span class="token string">&quot;dom&quot;</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span>prop<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> BlockCallback<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span>
        <span class="token operator">?</span> prop
        <span class="token operator">:</span> prop
        <span class="token operator">?</span> <span class="token function">prop</span><span class="token punctuation">(</span>fence<span class="token punctuation">,</span> p<span class="token punctuation">.</span>fileName<span class="token punctuation">,</span> p<span class="token punctuation">.</span>frontmatter<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">?.</span>clipboard <span class="token operator">||</span> <span class="token function">test</span><span class="token punctuation">(</span>fence<span class="token punctuation">.</span>props<span class="token operator">?.</span>clipboard<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      fence<span class="token punctuation">.</span>codeBlockWrapper <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>fence<span class="token punctuation">.</span>codeBlockWrapper<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;.lang-display&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          <span class="token function">pipe</span><span class="token punctuation">(</span>
            el<span class="token punctuation">,</span>
            <span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">CLIPBOARD</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;use-clipboard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">addVueEvent</span><span class="token punctuation">(</span><span class="token string">&quot;onClick&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;copyToClipboard(&#39;testing&#39;)&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token function">test</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>provideClipboardFunctionality<span class="token punctuation">)</span> <span class="token operator">||</span>
      o<span class="token operator">?.</span>clipboard <span class="token operator">||</span>
      <span class="token function">test</span><span class="token punctuation">(</span>fence<span class="token punctuation">.</span>props<span class="token operator">?.</span>clipboard<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">const clipboardAvailable = () =&gt; !!navigator?.clipboard?.writeText
  const copyToClipboard = (text) =&gt; {
    navigator?.clipboard?.writeText(text)
  }\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      p<span class="token punctuation">.</span><span class="token function">addCodeBlock</span><span class="token punctuation">(</span><span class="token string">&quot;clipboard&quot;</span><span class="token punctuation">,</span> script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> fence<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CLIPBOARD 是一个 svg 图标。可以看到，这里判断了 option 是否配置 clipboard 为 true，如果有添加 图标，并且给图标添加事件 copyToClipboard，可能是这里出了问题。我看 8 个月前有人提了相关的 issue，但是没有回复，也就没有继续关心这个代码。</p><h3 id="vite-plugin-实践" tabindex="-1"><a class="header-anchor" href="#vite-plugin-实践" aria-hidden="true">#</a> Vite plugin 实践</h3><p>基本的逻辑理清楚了，接下来可以写一个自己的 plugin-md 试一试了。</p><p>首先我在项目的 src 目录下面，创建了一个 plugin 目录。其实这是有问题的，这是一个 vite 的 plugin，写在 src 下面不伦不类。 因为这是一个练习用的 plugin，我也没有发布的想法，就这样先写一下。</p><p>插件目录如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rollup-plugin-md
    ├── convertor
    │   ├── htmlToSfc.ts
    │   ├── index.ts
    │   └── markdown-parser.ts
    └── index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先是 index 中的内容：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@rollup/pluginutils&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> markdownToVue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./convertor/index&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">mdPlugin</span><span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> config<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建 filter，官方推荐，用来判断是否是需要转换的类型文件 https://github.com/rollup/plugins/tree/master/packages/pluginutils#createfilter</span>
  <span class="token comment">// 选择所有 .md 文件</span>
  <span class="token keyword">const</span> filter <span class="token operator">=</span> <span class="token function">createFilter</span><span class="token punctuation">(</span>
    options<span class="token punctuation">.</span>include <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.md$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    options<span class="token punctuation">.</span>exclude <span class="token operator">||</span> <span class="token keyword">null</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// this name will show up in warnings and errors rollup 配置项</span>
    name<span class="token operator">:</span> <span class="token string">&quot;rollup-plugin-md&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 指定插件加载顺序  https://cn.vitejs.dev/guide/api-plugin.html #插件顺序</span>
    <span class="token comment">// vite 官方配置 pre 会在 alias 解析后，官方核心插件加载前调用</span>
    enforce<span class="token operator">:</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">,</span>
    <span class="token function">configResolved</span><span class="token punctuation">(</span>resolvedConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 存储最终解析的配置</span>
      config <span class="token operator">=</span> resolvedConfig<span class="token punctuation">;</span>
      <span class="token comment">// console.log(&#39;vite config ------&#39;, config)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// 在其他钩子中使用存储的配置</span>
    <span class="token comment">// https://rollupjs.org/plugin-development/#transform</span>
    <span class="token comment">// code 是读取的文件内容</span>
    <span class="token comment">// id 是文件的绝对路径</span>
    <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转换文件到</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">markdownToVue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 热刷新重新渲染</span>
    <span class="token keyword">async</span> <span class="token function">handleHotUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> defaultRead <span class="token operator">=</span> ctx<span class="token punctuation">.</span>read<span class="token punctuation">;</span>
      ctx<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">markdownToVue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">defaultRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 config 其实我没有用到，只是方便后面拓展使用，我在 markdownToVue 中直接返回了一个 Vue SFC 字符串。</p><p>既然 index 有了，那就先导入使用一下呗。</p><p>在 vite.config.ts 中添加代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> mdPlugin <span class="token keyword">from</span> <span class="token string">&#39;./src/plugins/rollup-plugin-md/index&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">mdPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token operator">...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里拉取的 vite 模板，<code>tsconfig.json</code> 中配置了 reference，项目把 vite 打包配置和项目配置做了区分。ts 中的 references 是 3.0 新增的功能，主要是为了提升 ts 检测效率。</p><p>比如说，如果我们的项目中，区分了两个模块，比如说这里，区分了业务模块和打包配置的相关模块。如果我们只是修改打包配置，很明 显，不需要对业务模块进行检查。所以这里拆出了另一个 <code>tsconfig.node.json</code>。我们要在 vite.config.ts 中使用 plugin，需要将相 关文件加入 tsconfig.node.json。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>--- tsconfig.json
<span class="token punctuation">{</span>
  ...
  <span class="token comment">// 项目中用不到 plugin 所以要排除</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/plugins/rollup-plugin-md/**/*.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;references&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./tsconfig.node.json&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
--- tsconfig.node.json
<span class="token punctuation">{</span>
 ...
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;vite.config.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 打包配置需要包括插件</span>
    <span class="token string">&quot;src/plugins/rollup-plugin-md/**/*.ts&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换 md 的方法，markdown-parser：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> MarkdownIt <span class="token keyword">from</span> <span class="token string">&quot;markdown-it&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> hljs <span class="token keyword">from</span> <span class="token string">&quot;highlight.js&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 markdown-it 将 md 文件转化为 html</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">MarkdownIt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Enable HTML tags in source</span>
  <span class="token comment">// 最好设置为 false，设置 true 后 lisp code block vue-complier 解析报错</span>
  html<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// Use &#39;/&#39; to close single tags (&lt;br /&gt;).</span>
  xhtmlOut<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// Autoconvert URL-like text to links</span>
  linkify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// Enable some language-neutral replacement + quotes beautification</span>
  typographer<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">highlight</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> lang<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token operator">&amp;&amp;</span> hljs<span class="token punctuation">.</span><span class="token function">getLanguage</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
          <span class="token string">&#39;&lt;pre class=&quot;hljs&quot;&gt;&#39;</span> <span class="token operator">+</span>
          <span class="token comment">// 复制代码会报错，直接传入 code 会报错，可能是被解析成 js，还没找到解决办法</span>
          <span class="token comment">// 在 code block 上添加 v-pre 指令，这样 vue 就不会对内部内容进行编译，直接原样输出提升效率</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;code-heading&quot;&gt;&lt;span class=&quot;icon lang-display&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lang<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;&lt;svg class=&quot;icon clipboard&quot; @click=&quot;_copyClipboard&quot;&gt;&lt;use xlink:href=&quot;#clipboard&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/div&gt;&lt;code v-pre&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          hljs<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span> language<span class="token operator">:</span> lang<span class="token punctuation">,</span> ignoreIllegals<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span>
          <span class="token string">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>__<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token string">&#39;&lt;pre class=&quot;hljs&quot;&gt;&lt;code&gt;&#39;</span> <span class="token operator">+</span>
      parser<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">escapeHtml</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span>
      <span class="token string">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> parser <span class="token keyword">as</span> mdParser <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是用了 <code>highlight.js</code> 高亮代码。MarkdownIt 的 highlight 方法会在解析到代码块时，自动调用。hljs.highlight 会将代码块 进行转换，然后添加上对应的类名。根据引用的不同样式文件，呈现不同的效果。</p><p>我在代码模块前，增加了两个功能区域，分别用来显示代码类型，和一键粘贴。</p><p>到了这一步，基本的 html 结构也就有了，但是注意，点击事件和代码高亮的样式还没有。现在是看不出来效果的。</p><p>将 html 转化为 SFC，<code>htmlToSFC</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">htmlToSFC</span> <span class="token operator">=</span> <span class="token punctuation">(</span>template<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  &lt;template&gt; 
    &lt;div class=&quot;markdown-body&quot;&gt;
        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
        &lt;div style=&quot;display:none&quot;&gt;
        &lt;svg id=&quot;clipboard&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; viewBox=&quot;0 0 256 256&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M166 152a6 6 0 0 1-6 6H96a6 6 0 0 1 0-12h64a6 6 0 0 1 6 6Zm-6-38H96a6 6 0 0 0 0 12h64a6 6 0 0 0 0-12Zm54-66v168a14 14 0 0 1-14 14H56a14 14 0 0 1-14-14V48a14 14 0 0 1 14-14h37.2a45.8 45.8 0 0 1 69.6 0H200a14 14 0 0 1 14 14ZM94 64v2h68v-2a34 34 0 0 0-68 0Zm108-16a2 2 0 0 0-2-2h-29.7a44.9 44.9 0 0 1 3.7 18v8a6 6 0 0 1-6 6H88a6 6 0 0 1-6-6v-8a44.9 44.9 0 0 1 3.7-18H56a2 2 0 0 0-2 2v168a2 2 0 0 0 2 2h144a2 2 0 0 0 2-2Z&quot;/&gt;&lt;/svg&gt;
        &lt;/div&gt;
    &lt;/div&gt;
  &lt;/template&gt;
  &lt;script  setup&gt;
    import &quot;highlight.js/styles/arduino-light.css&quot;;
    // const clipboardAvailable = () =&gt; !!navigator?.clipboard?.writeText
    const _copyClipboard = e =&gt; {
        const target = e.currentTarget.parentNode.parentNode.querySelector(&#39;code&#39;)
        const text = target.innerText
        navigator?.clipboard?.writeText(text)
    }
  &lt;/script&gt;
  &lt;style lang=&quot;scss&quot; scoped&gt;
    .code-heading {
        display: flex;
        align-items: center;
        justify-content: end;
        color: #393a34;
        line-height: 1rem;
        .icon +.icon{
            margin-left: 0.2rem;
        }
        .clipboard {
            width: 1rem;
            height: 1rem;
            cursor: pointer;
            opacity: .75;
        }
    }
    .hljs{
        padding: 15px 12px;
        margin: 0;
        background: #f8f8f8;
        &gt; code {
            font-size: 12px;
            word-break: normal;
            display: block;
            overflow-x: auto;
        }
    }
    
  &lt;/style&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里的实现就很简单了，没有做过多处理，直接拼接。并且导入 highlight.js 相关样式，把点击事件还有 svg 图标加上。没有做过 多处理，也没有添加 source map。</p>`,32);function w(q,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,s("p",null,[n("本来我是使用 "),s("a",d,[n("vite-plugin-md"),t(a)]),n(" 这个官方插件，引入后也成功将 md 转化成了 vue 组件 。随后，想添加一个常见的功能，高亮代码。参考 github 上的 README.md，首先尝试了添加 markdown-it 插件（ vite-plugin-md 使 用的也是 markdown-it，也允许添加 markdown-it 插件），如下：")]),k,s("p",null,[n("并没有生效，接下来我又看到插件有提供几个 builder，其中 "),s("a",v,[n("Code Builder"),t(a)]),n(" 可 以提供代码高亮，还有快捷复制的功能。引入 builder 后，确实实现了代码高亮，但是粘贴代码功能会报错。")]),m,s("p",null,[s("a",b,[n("vite 插件"),t(a)]),n("是在 rollup 插件基础上进行的拓展，rollup 插件中的 hooks 也都是支 持的。")]),g,s("p",null,[n("这里将之前抽离的各种 block，合并在一起，组成一个 Vue SFC 的标准结构。插件的 "),f,n(" 设置成 pre，也就好理解了。在插件中 ，我们只是对文件内容进行 transform，至于怎么解释 Vue SFC 是 Vite 自己的问题。只要我们返回的是一个合法的 Vue SFC 格式字符 串，Vite 就会使用 "),s("a",y,[n("@vue/compiler-sfc"),t(a)]),n("，去编译为标准的 JavaScript 和 CSS，这样组件执行提前到 pre 也就是自然的事情了。")]),h])}const C=e(l,[["render",w],["__file","index.html.vue"]]);export{C as default};
